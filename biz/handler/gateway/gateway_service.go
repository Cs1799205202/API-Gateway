// Code generated by hertz generator.

package gateway

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"net/http"
	"sync"

	gateway "github.com/Cs1799205202/API-Gateway/biz/model/gateway"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"
)

var ClientMap sync.Map

// Route .
// @router /agw/:ServiceName/:MethodName [POST]
func Route(ctx context.Context, c *app.RequestContext) {
	var err error
	var req gateway.APIRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	svcName := req.ServiceName
	methodName := req.MethodName

	// resp := new(gateway.APIResponce)
	// resp.Message = svcName + " " + methodName + " " + req.Message

	rpc_req, err := http.NewRequest(http.MethodPost, "", bytes.NewBuffer([]byte(`{ "message":"`+req.Message+`"}`)))
	if err != nil {
		hlog.Warnf("new http request failed: %v", err)
		c.JSON(http.StatusOK, errors.New("failed to new http request"))
		return
	}
	rpc_req.URL.Path = fmt.Sprintf("/internal/%s", methodName)
	customReq, err := generic.FromHTTPRequest(rpc_req)
	if err != nil {
		hlog.Error("convert failed", err)
		c.JSON(http.StatusOK, "failed to convert rpc_req to customReq")
		return
	}

	cli, ok := ClientMap.Load(svcName)
	hlog.Debug(svcName, " ", cli)
	if !ok {
		c.JSON(http.StatusNotAcceptable, "访问了未注册的服务")
		return
	}
	resp, err := cli.(genericclient.Client).GenericCall(ctx, "", customReq)
	if err != nil {
		c.JSON(http.StatusInternalServerError, fmt.Sprint("内部错误, 泛化调用失败, 请检查该服务内是否有对应的方法!", err))
		return
	}

	// c.JSON(consts.StatusOK, resp)
	c.JSON(consts.StatusOK, resp.(*generic.HTTPResponse).Body)
}
