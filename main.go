// Code generated by hertz generator.

package main

import (
	"os"
	"strings"

	"github.com/Cs1799205202/API-Gateway/biz/handler/gateway"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"
	etcd "github.com/kitex-contrib/registry-etcd"
)

func main() {
	h := server.Default()

	initClient()
	register(h)

	h.Spin()
}

func initClient() {
	idlPath := "./idl/"
	idls, err := os.ReadDir(idlPath)
	if err != nil {
		hlog.Fatal("read dir failed", err)
	}
	etcdResolver, err := etcd.NewEtcdResolver([]string{"127.0.0.1:2379"})
	if err != nil {
		hlog.Fatal(err)
	}
	
	for _, idl := range idls {
		if idl.IsDir() || idl.Name() == "gateway.thrift" {
			continue
		}
		svcName := strings.ReplaceAll(idl.Name(), ".thrift", "")

		provider, err := generic.NewThriftFileProvider(idl.Name(), idlPath)
		if err != nil {
			hlog.Fatal("new thrift file provider failed")
			break
		}
		g, err := generic.HTTPThriftGeneric(provider)
		if err != nil {
			hlog.Fatal("error on new generic.HTTPThriftGeneric", err)
		}
		cli, err := genericclient.NewClient(
			svcName,
			g,
			client.WithResolver(etcdResolver),
		)
		if err != nil {
			hlog.Fatal("error creating genericclient")
		}

		gateway.ClientMap.Store(svcName, cli)
	}
}