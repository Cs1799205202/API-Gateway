// Code generated by Kitex v0.6.1. DO NOT EDIT.

package upperservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	upper "upper/kitex_gen/upper"
)

func serviceInfo() *kitex.ServiceInfo {
	return upperServiceServiceInfo
}

var upperServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UpperService"
	handlerType := (*upper.UpperService)(nil)
	methods := map[string]kitex.MethodInfo{
		"toupper": kitex.NewMethodInfo(toupperHandler, newUpperServiceToupperArgs, newUpperServiceToupperResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "upper",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func toupperHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*upper.UpperServiceToupperArgs)
	realResult := result.(*upper.UpperServiceToupperResult)
	success, err := handler.(upper.UpperService).Toupper(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUpperServiceToupperArgs() interface{} {
	return upper.NewUpperServiceToupperArgs()
}

func newUpperServiceToupperResult() interface{} {
	return upper.NewUpperServiceToupperResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Toupper(ctx context.Context, req *upper.NormalRequest) (r *upper.UpperResponse, err error) {
	var _args upper.UpperServiceToupperArgs
	_args.Req = req
	var _result upper.UpperServiceToupperResult
	if err = p.c.Call(ctx, "toupper", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
